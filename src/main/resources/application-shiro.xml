<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						 http://www.springframework.org/schema/websocket  http://www.springframework.org/schema/websocket/spring-websocket.xsd
	">
	<!-- shiro生命周期执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- spring提供的基于url的权限过滤 -->
	<bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/" />
		<property name="successUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filterChainDefinitions">
			<value>
				/login.html = anon
				/perm/login/login = anon
				/perm/login/logout = authc
				/resources/** = anon
				/views/**= authc,roles[admin]
				/user/create = authc,roles[manager]
				/** = anon
			</value>
		</property>

		<property name="filters">
			<map>
				<entry key="authc">
					<!-- 认证过滤 -->
					<bean class="cn.howso.deeplan.server.account.filter.LoginFilter"></bean>
				</entry>
				<!-- 角色过滤 -->
				<!-- <entry key="roles"> <bean class="cn.howso.common.system.authorization.filter.RoleFilter"></bean> 
					</entry> -->
				<!-- 权限过滤 -->
				<entry key="perms">
					<bean class="cn.howso.deeplan.server.account.filter.PermissionFilter"></bean>
				</entry>
			</map>
		</property>
	</bean>

	<!-- shiro的核心之一 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"></property>
		<property name="cacheManager" ref="redisCacheManager" />
		<property name="sessionManager" ref="defaultWebSessionManager" />
	</bean>
	<!-- 自定义域，用于认证和授权 -->
	<bean id="myRealm" class="cn.howso.deeplan.server.account.realm.MyRealm">
		<property name="userService" ref="userService"></property>
		<property name="roleService" ref="roleService"></property> 
		<property name="permissionService" ref="permissionService"></property>
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorCache" />
	</bean>
	<!-- session管理器 -->
	<bean id="defaultWebSessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionDAO" ref="mySessionDao" />
		<property name="sessionIdCookie" ref="wapsession" />
	</bean>
	<!-- 自定义缓存管理器 ，包括认证缓存和权限缓存 -->
	<bean id="redisCacheManager"
		class="cn.howso.deeplan.server.account.cache.RedisCacheManager">
		<property name="authenCache" ref="authenCache" />
		<property name="authorCache" ref="authorCache" />
	</bean>
	<!-- shiro核心配置结束 -->
	<bean id="mySessionDao"
		class="cn.howso.deeplan.server.account.session.MyShiroSessionDao">
		<property name="shiroSessionRespository" ref="redisSessionResp" />
	</bean>
	<bean id="wapsession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="name" value="websessionid" />
		<property name="path" value="/"></property>
	</bean>
	<!-- 缓存实现 -->
	<!-- 如果不使用redis存储session的话，把 defaultWebSessionManager中的sessionDAO那一段注释了 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" />

	<bean id="sessionJedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.url}" />
		<constructor-arg name="port" value="${redis.port}" />
		<constructor-arg name="timeout" value="${redis.timeout}" />
		<constructor-arg name="password" value="${redis.password}"></constructor-arg>
		<constructor-arg name="database" value="${redis.db.0}"></constructor-arg>
	</bean>

	<bean id="redisSessionResp"
		class="cn.howso.deeplan.server.account.session.RedisShiroSessionRespositoryImpl">
		<property name="jedisPool" ref="sessionJedisPool" />
	</bean>
	<bean id="authenCache" class="cn.howso.deeplan.server.account.cache.RedisCache">
		<property name="jedisPool" ref="authenJedisPool"></property>
	</bean>
	<bean id="authorCache" class="cn.howso.deeplan.server.account.cache.RedisCache">
		<property name="jedisPool" ref="authorJedisPool"></property>
	</bean>
	<bean id="authenJedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.url}" />
		<constructor-arg name="port" value="${redis.port}" />
		<constructor-arg name="timeout" value="${redis.timeout}" />
		<constructor-arg name="password" value="${redis.password}"></constructor-arg>
		<constructor-arg name="database" value="${redis.db.1}"></constructor-arg>
	</bean>
	<bean id="authorJedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.url}" />
		<constructor-arg name="port" value="${redis.port}" />
		<constructor-arg name="timeout" value="${redis.timeout}" />
		<constructor-arg name="password" value="${redis.password}"></constructor-arg>
		<constructor-arg name="database" value="${redis.db.2}"></constructor-arg>
	</bean>
	<bean id="userService"
		class="cn.howso.deeplan.server.account.service.UserService">
	</bean>
	<bean id="roleService"
		class="cn.howso.deeplan.server.account.service.RoleService">
	</bean>
	<bean id="permissionService"
		class="cn.howso.deeplan.server.account.service.PermissionService">
	</bean>

</beans>
