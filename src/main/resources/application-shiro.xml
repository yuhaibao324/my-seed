<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						 http://www.springframework.org/schema/websocket  http://www.springframework.org/schema/websocket/spring-websocket.xsd
	">
	<!-- shiro生命周期执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- begin 开启注解权限验证 。 -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"> <property name="proxyTargetClass" 
		value="true" /> </bean> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
		<property name="exceptionMappings"> <props> 登录 <prop key="org.apache.shiro.authz.UnauthenticatedException"> 
		redirect:/login.html </prop> 授权 <prop key="org.apache.shiro.authz.UnauthorizedException"> 
		redirect:/admin/common/exceptionLog </prop> </props> </property> <property 
		name="defaultErrorView" value="error/genericView"/> </bean> -->
	<!-- end 开启注解权限验证 -->
	<!-- spring提供的基于url的权限过滤 -->
	<bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/" />
		<property name="unauthorizedUrl" value="/seed/static/unauthorized.html" />
		<property name="filterChainDefinitions">
			<value>
				/ = authc
				/files/** = anon
				/druid/** = anon<!-- druid相关资源不是我们自己写的，没法在url上带sessionid -->
				/static/** = anon
				/forward/** = anon
				/** = authc,perms
			</value>
		</property>

		<property name="filters">
			<map>
				<entry key="authc">
					<!-- 认证过滤 -->
					<bean class="cn.howso.deeplan.perm.filter.LoginFilter"></bean>
				</entry>
				<!-- 角色过滤 -->
				<!-- <entry key="roles"> <bean class="cn.howso.common.system.authorization.filter.RoleFilter"></bean> 
					</entry> -->
				<!-- 权限过滤 -->
				<entry key="perms">
					<bean class="cn.howso.deeplan.perm.filter.PermissionFilter">
						<property name="uriPermService" ref="uriPermService"></property>
						<property name="dataCache" ref="dataCache"></property>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	<bean id="dataCache" class="cn.howso.deeplan.perm.cache.RedisCache">
		<property name="prefix" value="data."></property>
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>
	<!-- shiro的核心之一 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"></property>
		<property name="cacheManager" ref="redisCacheManager" />
		<property name="sessionManager" ref="defaultWebSessionManager" />
	</bean>
	<!-- 自定义域，用于认证和授权 -->
	<bean id="myRealm" class="cn.howso.deeplan.perm.realm.MyRealm">
		<property name="authenService" ref="authenService"></property>
		<property name="authorService" ref="authorService"></property>
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorCache" />
	</bean>
	<!-- session管理器 -->
	<bean id="defaultWebSessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<!-- 注释掉代表不使用redis缓存session -->
		<property name="sessionDAO" ref="redisSessionDao" />
		<property name="sessionIdCookieEnabled" value="false"></property>
		<!-- <property name="sessionIdCookie" ref="wapsession" /> -->
	</bean>
	<!-- 自定义缓存管理器 ，包括认证缓存和权限缓存 -->
	<bean id="redisCacheManager" class="cn.howso.deeplan.perm.cache.RedisCacheManager">
		<property name="authenCache" ref="authenCache" />
		<property name="authorCache" ref="authorCache" />
	</bean>
	<!-- shiro核心配置结束 -->
	<bean id="mySessionDao" class="cn.howso.deeplan.perm.session.dao.MyShiroSessionDao">
		<property name="shiroSessionRespository" ref="redisSessionResp" />
	</bean>
	<bean id="sessionRedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="usePool" value="true"></property>
		<property name="hostName" value="${rediscache.host}" />
		<property name="port" value="${rediscache.port}" />
		<property name="password" value="${rediscache.pass}" />
		<property name="timeout" value="${rediscache.timeout}" />
		<property name="database" value="1"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>
	<bean id="redisSessionDao" class="cn.howso.deeplan.perm.session.dao.RedisSessionDao">
		<property name="redisTemplate">
			<bean class="org.springframework.data.redis.core.StringRedisTemplate">
				<property name="connectionFactory" ref="sessionRedisConnectionFactory" />
				<property name="keySerializer">
					
					<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
<!-- 				<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
 -->			</property>
				<property name="valueSerializer">
					<!-- 
					SimpleSession反序列化json有问题。
					<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer">
					</bean> -->
 					<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>				 
				</property>
				
			</bean>
		</property>
	</bean>
	<bean id="wapsession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="name" value="websessionid" />
		<property name="path" value="/"></property>
	</bean>
	<!-- 缓存实现 -->
	<!-- 如果不使用redis存储session的话，把 defaultWebSessionManager中的sessionDAO那一段注释了 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" />

	<bean id="redisSessionResp"
		class="cn.howso.deeplan.perm.session.dao.RedisShiroSessionRespositoryImpl">
		<property name="prefix" value="session."></property>
		<property name="jedisPool" ref="jedisPool" />
	</bean>
	<bean id="authenCache" class="cn.howso.deeplan.perm.cache.RedisCache">
		<property name="prefix" value="authen."></property>
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>
	<bean id="authorCache" class="cn.howso.deeplan.perm.cache.RedisCache">
		<property name="prefix" value="author."></property>
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.url}" />
		<constructor-arg name="port" value="${redis.port}" />
		<constructor-arg name="timeout" value="${redis.timeout}" />
		<constructor-arg name="password" value="${redis.password}"></constructor-arg>
		<constructor-arg name="database" value="${redis.db}"></constructor-arg>
	</bean>
	<!-- <bean id="authenService" class="cn.howso.deeplan.perm.service.AuthenService"> 
		</bean> <bean id="authorService" class="cn.howso.deeplan.perm.service.AuthorService"> 
		</bean> -->

</beans>
