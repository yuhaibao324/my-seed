#多环境部署
#mybatis单表CURD
#mybatis分页
#统一异常处理
#常量管理
#http返回值设计
	正常响应不对结果作包装，有错误时才对结果作包装。业务代码中对预期的错误要抛出BusinessException。
#无cookie的session
	tomcat的context.xml的context标签中添加cookies="false"，设置禁用cookie
	将jsessionid写在url上。servlet中获取sessionid通过getRequestedSessionId。（shiro中是JSESSIONID）
	并且要自己实现sessionContext，根据sessionid获取session。
	前端页面需要重写url
	如/seed/users=>/seed/users?v=1;JSESSIONID=c2ecc4da-b94e-4dba-ba4f-31e9e6640900?v=1
	Session fixation问题
#缓存
	与用户相关的数据，由于url上有sessionid，所以可以缓存。但是sessionid在退出会话后会重新生成，导致缓存时间最多在会话期间。
	与用户无关的数据，前端不要作url重写，服务端不要对其进行认证和授权的过滤。
	静态资源，全部放在static目录下，统一不做认证和授权的过滤。
	如果有需要做权限过滤的静态页面，则可以让其请求controller，然后转发，这样会走权限过滤。
	
	权限缓存。
	给用户授予/回收角色、给用户授予/回收权限，给角色授予/回收权限时，都会影响用户的权限，都需要更新缓存的权限。
	前面两种情况，更新某用户的权限缓存就行了。第三种情况，需要使受影响的用户的缓存都无效。
#权限设计
	修改用户的角色、权限时，缓存中对应用户的角色和权限要更新。这种是比较好处理的，修改了哪个用户，就更新哪个用户的缓存。
	当修改的是角色时，关联到的用户可能不止一个。这个时候，先从数据库中查询该角色关联到哪些用户。然后再更新缓存中对应的内容。
	
	将资源（数据，包括用户、角色等）划分为不同的组，对应的权限也会有不同的组（权限空间permSpace）。
	每一个权限空间中的权限，都只对该空间中的资源进行操作。
	如果用户需要跨权限空间进行操作，就必须要有另一个权限空间中的权限。
	所以必须有两项需要明确：1、操作的资源属于哪个权限空间。2、是否有该权限空间中对该资源的权限。
#用户角色授予、用户角色回收、新增角色、删除角色、修改角色权限、用户授予权限、用户权限回收。
	
